name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  unit-tests:
    uses: ./.github/workflows/test.unit.yml
    secrets: inherit

  e2e-tests:
    needs: unit-tests
    uses: ./.github/workflows/test.e2e.yml
    secrets: inherit

  deploy:
    needs:
      - e2e-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd /home/debian

            # Cloner le projet si le dossier n'existe pas
            if [ ! -d "eventhub" ]; then
              git clone git@github.com:rachidje/eventhub.git eventhub
            fi

            cd eventhub

            # V√©rifie que c'est bien un d√©p√¥t Git
            if [ ! -d ".git" ]; then
              echo "Erreur : ce n'est pas un d√©p√¥t Git."
              exit 1
            fi

            git pull origin main

            cat <<EOF > back/.env
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            POSTGRES_USER=${{ secrets.DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.DB_NAME }}
            DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}
            EOF

            docker compose down
            docker compose build || {
              echo "Le build a √©chou√©, arr√™t du d√©ploiement."
              exit 1
            }

            docker compose up -d

            echo "‚è≥ V√©rification des statuts des services..."
            sleep 5  # Laisse le temps aux services de d√©marrer

            # Liste les services attendus
            expected_services=("backend" "frontend" "postgres")

            # V√©rifie que chaque service est en √©tat 'running'
            for service in "${expected_services[@]}"; do
              status=$(docker inspect -f '{{ .State.Status }}' "$service" 2>/dev/null || echo "not found")
              if [ "$status" != "running" ]; then
                echo "‚ùå Le service '$service' n'est pas en √©tat 'running' (√©tat actuel : $status)"
                docker logs "$service" || true
                exit 1
              fi
            done

            echo "‚úÖ Tous les services sont d√©marr√©s correctement."

            # Migration Prisma (ex√©cut√©e *apr√®s* validation)
            docker compose run --rm migrate || {
              echo "‚ùå La migration Prisma a √©chou√©."
              exit 1
            }

            echo "üöÄ D√©ploiement termin√© avec succ√®s."

